{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECTS\\\\Ashberry\\\\client\\\\src\\\\context\\\\NoteState.js\",\n    _s = $RefreshSig$();\n\nimport NoteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); //get all Note\n\n  const getNotes = async () => {\n    //TODO :API call\n    //API call\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n  }; //Add a Note\n\n\n  const addNote = async (title, description, tag) => {\n    //TODO :API call\n    //API call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  }; //Delete a Note\n\n\n  const deleteNote = async id => {\n    //TODO :API call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; //Edit a Note\n\n\n  const editNote = async (id, title, description, tag) => {\n    //API call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(notes)); //Logic to edit in clent\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    setNotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["E:/PROJECTS/Ashberry/client/src/context/NoteState.js"],"names":["NoteContext","useState","NoteState","props","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","console","log","newNotes","filter","_id","editNote","parse","index","length","element","children"],"mappings":"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","sourcesContent":["import NoteContext from \"./noteContext\";\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\";\r\n  const notesInitial = [\r\n   \r\n  ];\r\n\r\n  const [notes, setNotes] = useState(notesInitial);\r\n    //get all Note\r\n    const getNotes = async() => {\r\n      //TODO :API call\r\n        //API call\r\n  \r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n          method: \"GET\",\r\n    \r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\":\r\n              localStorage.getItem('token')\r\n          },\r\n        });\r\n        const json =await response.json()\r\n         \r\n      setNotes(json)\r\n    }\r\n  //Add a Note\r\n  const addNote = async(title, description, tag) => {\r\n    //TODO :API call\r\n      //API call\r\n\r\n      const response = await fetch(`${host}/api/notes/addnote`, {\r\n        method: \"POST\",\r\n  \r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"auth-token\":\r\n            localStorage.getItem('token')\r\n        },\r\n        \r\n        body: JSON.stringify({title,description,tag}),\r\n      });\r\n      const note =await response.json();\r\n      setNotes(notes.concat(note));\r\n\r\n\r\n     \r\n    \r\n  };\r\n\r\n  //Delete a Note\r\n  const deleteNote = async(id) => {\r\n    //TODO :API call\r\n    \r\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n      method: \"DELETE\",\r\n\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          localStorage.getItem('token')\r\n      },\r\n\r\n    });\r\n    const json = await response.json();\r\n    console.log(json)\r\n    const newNotes = notes.filter((note) => {\r\n      return note._id !== id;\r\n    });\r\n    setNotes(newNotes);\r\n  };\r\n\r\n  //Edit a Note\r\n  const editNote = async (id, title, description, tag) => {\r\n    //API call\r\n\r\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n      method: \"PUT\",\r\n\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          localStorage.getItem('token')\r\n      },\r\n\r\n      body: JSON.stringify({title,description,tag}),\r\n    });\r\n    const json = response.json();\r\n    console.log(json)\r\n   \r\n    let newNotes = JSON.parse(JSON.stringify(notes))\r\n    //Logic to edit in clent\r\n\r\n    for (let index = 0; index < notes.length; index++) {\r\n      const element = notes[index];\r\n      if (element._id === id) {\r\n        newNotes[index].title = title;\r\n        newNotes[index].description = description;\r\n        newNotes[index].tag = tag;\r\n        break;\r\n      }\r\n      \r\n    }\r\n    setNotes(newNotes);\r\n  };\r\n\r\n  return (\r\n    <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote,getNotes }}>\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  );\r\n};\r\nexport default NoteState;\r\n"]},"metadata":{},"sourceType":"module"}